package oxsc;

import java.io.FileNotFoundException;
import java.io.PrintWriter;

import gui.MessageBox;
import gui.TabAirSpeed;
import gui.TabCurrent;
import gui.TabData;
import gui.TabGeneralSettings;
import gui.TabPPM;
import gui.TabVario;
import gui.TabVoltage;

public class WriteConf {
	
	private static PrintWriter output;
	
	public static void writeConf() {

		try {
			output = new PrintWriter(Validation.getOutputConfigDir());
			
			output.println("// Configuration file generated by openXsensor Configurator " + Validation.getOxsCversion() + " the " + MainP.date );
			output.println("// !! This file is only compatible with openXsensor v" + Validation.getOxsVersionCompStart() + " to v"
					+ Validation.getOxsVersionCompEnd() + " !!");
			output.println("");
			output.println("// OpenXsensor https://github.com/openXsensor");
			output.println("// started by Rainer Schlo√ühan");
			output.println("");
			output.println("//***********************************************************************************************************************");
			output.println("// Another file in this project (see oXs_config_description.h) provides detailed explanations on how to set up this file.");
			output.println("//***********************************************************************************************************************");
			output.println("//  Note: the oXs_config.h file present on Github is not always meaningful.");
			output.println("//        It could be that the combination of active/non active parameters is not consistent.");
			output.println("//        This is just the result of many updates and tests in this document.");
			output.println("//        So take always care to set up the oXs_config.h file according to your needs and check carefully all options.");
			output.println("//        You can also use the oXs Configurator in order to generate automatically a valid file.");
			output.println("//***********************************************************************************************************************");
			output.println("");
			output.println("#ifndef OXS_CONFIG_h");
			output.println("#define OXS_CONFIG_h");
			output.println("");

	        // ---------------------------------- Protocol --------------------------------------
	        
	        output.println("// --------- 1 - General protocol ---------");
	        output.println("// ***** 1.1 - Multiplex protocol (if line commented oXs assumes it is Frsky protocol) *****");
	        if (MainP.protocol.getName().equals("Multiplex")) {
	        	output.println("#define MULTIPLEX");
	        } else {
	        	output.println("//#define MULTIPLEX");
	        }
	        output.println("");
	        output.println("// ***** 1.2 - FrSky device ID (required when Sport protocol is used)  *****");
			output.println("#define SENSOR_ID    " + TabGeneralSettings.getSensorIDDdl().getCaptionLabel().getText());
			output.println("");

			// ---------------------------------- Serial pin --------------------------------------

			output.println("// --------- 2 - Serial data pin choice ---------");
			output.println("#define PIN_SERIALTX    " + TabGeneralSettings.getSerialPinDdl().getCaptionLabel().getText() + "       // The pin which transmits the serial data to the FrSky telemetry enabled receiver");
			output.println("");

			// ---------------------------------- PPM --------------------------------------

			output.println("// --------- 3 - PPM settings ---------");
			if ((TabGeneralSettings.getVarioTgl().getValue() == 1 || TabGeneralSettings.getAirSpeedTgl().getValue() == 1) && TabPPM.getPpmTgl().getValue() == 1) {
				output.println("#define PIN_PPM         " + TabPPM.getPpmPinDdl().getCaptionLabel().getText() + "       // Arduino can read a PPM Signal coming from Tx. This allows to change the vario sensitivity using a pot or a switch on TX.");
			} else {
				output.println("//#define PIN_PPM               // Arduino can read a PPM Signal coming from Tx. This allows to change the vario sensitivity using a pot or a switch on TX.");
			}
			output.println("#define PPM_MIN_100     " + (int)TabPPM.getPpmRngMinNBox().getValue() + "     // 1500 - 512 ; pulse width (usec) when TX sends a channel = -100");
			output.println("#define PPM_PLUS_100    " + (int)TabPPM.getPpmRngMaxNBox().getValue() + "    // 1500 + 512 ; pulse width (usec) when TX sends a channel = +100");
			output.println("");

			// ---------------------------------- Vario --------------------------------------

			output.println("// --------- 4 - Vario settings ---------");
			output.println("");
			output.println("// ***** 4.1 - Connecting 1 or 2 MS5611 barometric sensor *****");
			if ( TabGeneralSettings.getVarioTgl().getValue() == 1 ) {
				output.println("#define VARIO                   // set as comment if there is no vario");
				if (TabVario.getVarioType().equals("BMP180 / 085")) {
					output.println("#define SENSOR_IS_BMP180");
				}
				if ( TabGeneralSettings.getVario2Tgl().getValue() == 1 ) {
					output.println("#define VARIO2                  // set as comment if there is no second vario");
				} else {
					output.println("//#define VARIO2                // set as comment if there is no second vario");
				}
			} else {
				output.println("//#define VARIO                 // set as comment if there is no vario");
				output.println("//#define VARIO2                // set as comment if there is no second vario");
			}
			output.println("");
			output.println("// ***** 4.2 - Sensitivity predefined by program *****");
			output.println("#define SENSITIVITY_MIN       " + (int)TabVario.getSensMinMaxRng().getArrayValue(0));
			output.println("#define SENSITIVITY_MAX       " + (int)TabVario.getSensMinMaxRng().getArrayValue(1));
			output.println("#define SENSITIVITY_MIN_AT    " + (int)TabVario.getvSpeedMinNBox().getValue());
			output.println("#define SENSITIVITY_MAX_AT    " + (int)TabVario.getvSpeedMaxNBox().getValue());
			output.println("");
			output.println("// ***** 4.3 - Sensitivity adjusted from the TX *****");
			output.println("#define SENSITIVITY_MIN_AT_PPM    " + (int)TabVario.getPpmRngSensMinMaxRng().getArrayValue(0) + "   // sensitivity will be changed by OXS only when PPM signal is between the specified range enlarged by -5/+5");
			output.println("#define SENSITIVITY_MAX_AT_PPM    " + (int)TabVario.getPpmRngSensMinMaxRng().getArrayValue(1));
			output.println("#define SENSITIVITY_PPM_MIN       " + (int)TabVario.getSensMinMaxRng().getArrayValue(0) + "   // common value for vario is 20");
			output.println("#define SENSITIVITY_PPM_MAX       " + (int)TabVario.getSensMinMaxRng().getArrayValue(1) + "  // common value for vario is 100");
			output.println("");
			output.println("// ***** 4.4 - Hysteresis parameter *****");
			output.println("#define VARIOHYSTERESIS    " + (int)TabVario.getVarioHysteresisSld().getValue());
			output.println("");
			output.println("// ***** 4.5 - Vertical speeds calculations *****");
			output.println("#define VARIO_PRIMARY              " + (int)TabVario.getvSpeed1Ddl().getValue() + "    // 0 means first ms5611, 1 means second ms5611, 2 means vario based on vario 1 + compensation from airspeed, 3 means average of first and second ms5611");
			output.println("#define VARIO_SECONDARY            " + (int)TabVario.getvSpeed2Ddl().getValue() + "    // 0 means first ms5611, 1 means second ms5611, 2 means vario based on vario 1 + compensation from airspeed, 3 means average of first and second ms5611");
			output.println("#define SWITCH_VARIO_MIN_AT_PPM    " + (int)TabVario.getPpmVspeedSwMinNBox().getValue());
			output.println("#define SWITCH_VARIO_MAX_AT_PPM    " + (int)TabVario.getPpmVspeedSwMaxNBox().getValue());
			output.println("");
			output.println("// ***** 4.6 - Analog vertical speed *****");
			if (TabGeneralSettings.getVarioTgl().getValue() == 1 && TabVario.getAnalogClimbTgl().getValue() == 1) {
				output.println("#define PIN_ANALOG_VSPEED    " + TabVario.getClimbPinDdl().getCaptionLabel().getText() + "    // the pin used to write the vertical speed to the Rx A1 or A2 pin (can be 3 or 11 because it has to use timer 2)");
			} else {
				output.println("//#define PIN_ANALOG_VSPEED       //  the pin used to write the vertical speed to the Rx A1 or A2 pin (can be 3 or 11 because it has to use timer 2)");
			}
			output.println("#define ANALOG_VSPEED_MIN     " + (int)TabVario.getOutClimbRateMinMaxRng().getArrayValue(0));
			output.println("#define ANALOG_VSPEED_MAX     " + (int)TabVario.getOutClimbRateMinMaxRng().getArrayValue(1));
			output.println("");

			// ---------------------------------- Air Speed --------------------------------------

			output.println("// --------- 5 - Airspeed settings ---------");
			if (TabGeneralSettings.getAirSpeedTgl().getValue() == 0) {
				output.print("//");
			}
			output.println("#define AIRSPEED    MS4525");
			output.println("");
			output.println("#define AIRSPEED_RESET_AT_PPM      " + (int)TabAirSpeed.getaSpeedResetNBox().getValue());
			output.println("");
			output.println("#define COMPENSATION_MIN_AT_PPM    " + (int)TabAirSpeed.getPpmRngCompMinMaxRng().getArrayValue(0));
			output.println("#define COMPENSATION_MAX_AT_PPM    " + (int)TabAirSpeed.getPpmRngCompMinMaxRng().getArrayValue(1));
			output.println("#define COMPENSATION_PPM_MIN       " + (int)TabAirSpeed.getPpmCompMinMaxRng().getArrayValue(0));
			output.println("#define COMPENSATION_PPM_MAX       " + (int)TabAirSpeed.getPpmCompMinMaxRng().getArrayValue(1));
			output.println("");

			// --------------------------- Voltages & Current sensor settings ---------------------------

			output.println("// --------- 6 - Voltages & Current sensor settings ---------");
			output.println("");
			output.println("// ***** 6.1 - Voltage Reference selection (VCC or 1.1V internal) *****");
			output.println(TabGeneralSettings.writeRefVolt());

			output.println("// ***** 6.2 - Voltages analog pins *****");
			for (int i = 1; i <= TabVoltage.getVoltnbr(); i++) {
				if (TabGeneralSettings.getVoltageTgl().getValue() == 1 && TabVoltage.getVoltTgl()[i].getValue() == 1 && (int)TabVoltage.getDdlVolt()[i].getValue() >= 0) {
					output.println("#define PIN_VOLTAGE_" + i + "    " + (int)TabVoltage.getDdlVolt()[i].getValue());
				} else {
					output.println("//#define PIN_VOLTAGE_" + i);
				}
			}
			output.println("");
			output.println("// ***** 6.3 - Voltage measurements calibration parameters *****");
			for (int i = 1; i <= TabVoltage.getVoltnbr(); i++) {
				if (TabGeneralSettings.getVoltageTgl().getValue() == 1 && TabVoltage.getVoltTgl()[i].getValue() == 1) {
					output.println("#define OFFSET_" + i + "             " + TabVoltage.getOffsetVoltNBox()[i].getValueLabel().getText() + "         // offset in mV");
					output.println("#define MVOLT_PER_STEP_" + i + "     " + MainP.round(MainP.mVoltStep(i), 2));
				} else {
					output.println("#define OFFSET_" + i + "             " + 0);
					output.println("#define MVOLT_PER_STEP_" + i + "     " + 1);
				}
			}
			output.println("");
			output.println("// ***** 6.4 - Number of lipo cells to measure (and transmit to Tx) *****");
			if (TabGeneralSettings.getVoltageTgl().getValue() == 1 && TabVoltage.getCellsTgl().getValue() == 1) {
				output.println("#define NUMBEROFCELLS    " + (int)TabVoltage.getDdlNbrCells().getValue());
			} else {
				output.println("//#define NUMBEROFCELLS");
			}
			output.println("");

			// ------------------------------ Current sensor ------------------------------

			output.println("// ***** 6.5 - Current sensor analog pin *****");
			if (TabGeneralSettings.getCurrentTgl().getValue() == 1 && (int)TabCurrent.getCurrentPinDdl().getValue() >= 0) {
				output.println("#define PIN_CURRENTSENSOR    " + (int)TabCurrent.getCurrentPinDdl().getValue());
			} else {
				output.println("//#define PIN_CURRENTSENSOR");
			}
			output.println("");
			output.println("// ***** 6.6 - Current sensor calibration parameters *****");
			output.println("#define OFFSET_CURRENT_STEPS         " + MainP.offsetCurrent());
			output.println("#define MAMP_PER_STEP                " + MainP.round(MainP.mAmpStep(), 2) + "   // INA282 with 0.1 ohm shunt gives 5000mv/A ");
			output.println("");

			// ---------------------------- Temperature sensor ----------------------------

			if (MainP.TEMP_ACTIVE) {
				if (TabGeneralSettings.getTemperatureTgl().getValue() == 1 /*&& (int)cp5.getGroup("tempPin").getValue() >= 0*/) { // TODO temperature
					output.println("// -------- Temperature sensor --------");
					output.println("#define PIN_TemperatureSensor   " /*+ ( (int)cp5.getGroup("tempPin").getValue() )*/ + "  // The Analog pin the optional temperature sensor is connected to");
					output.println("#define TEMPOFFSET              " /*+ cp5.get(Textfield.class, "tempOffset").getText()*/ + "  // Calibration offset");
				} else {
					//output.println("#define PIN_TemperatureSensor        // The Analog pin the optional temperature sensor is connected to");
					//output.println("#define TEMPOFFSET                   // Calibration offset");
				}
				output.println("");
			}

			// --------------------------------- RPM sensor ---------------------------------

			output.println("// --------- 7 - RPM (rotations per minute) settings ---------");
			if (TabGeneralSettings.getRpmTgl().getValue() == 1) {
				output.println("#define MEASURE_RPM");
			} else {
				output.println("//#define MEASURE_RPM");
			}
			output.println("");

			// ------------------------------ Save to EEPROM --------------------------------

			output.println("// --------- 8 - Persistent memory settings ---------");
			if (TabGeneralSettings.getSaveEpromTgl().getValue() == 1 && TabGeneralSettings.getResetBtnPinDdl().getValue() != -1) {
				output.println("#define SAVE_TO_EEPROM            // Current consumption will be stored in EEProm every 10 seconds.");
				output.println("#define PIN_PUSHBUTTON       " + TabGeneralSettings.getResetBtnPinDdl().getCaptionLabel().getText());
			} else {
				output.println("//#define SAVE_TO_EEPROM");
				output.println("//#define PIN_PUSHBUTTON");
			}
			output.println("");

			// ------------------------- Transmitted data settings -------------------------

			output.println("// --------- 9 - Data to transmit ---------");
			output.println("// General set up to define which measurements are transmitted and how");
			output.println("");

			writeDataToSend();

			// ---------------------------------- Debug --------------------------------------

			output.println("// --------- 10 - Reserved for developer. DEBUG must be activated here when we want to debug one or several functions in some other files. ---------");
			output.println("//#define DEBUG");
			output.println("");
			output.println("#ifdef DEBUG");
			output.println("#include \"HardwareSerial.h\"");
			output.println("#endif");
			output.println("");

			// ---------------------------------- The end --------------------------------------

			output.print("#endif// End define OXS_CONFIG_h");

			output.flush(); // Writes the remaining data to the file
			output.close(); // Finishes the file
			
		} catch (FileNotFoundException e) {
			StringBuilder message = new StringBuilder();
			message.append("                            OXS Configurator v" + Validation.getOxsCversion() + " for OXS v" + Validation.getOxsVersionCompStart() + "\n");
			message.append("                                                       ---\n");
			message.append("                         -- OpenXsensor configuration file GUI --\n");
			message.append("\n");
			message.append("\n    oXs directory: \"" + TabGeneralSettings.getOxsDir().getText().trim() + "\" does not exist !\n");
			MessageBox.error(message);
		}

	}

	private static void writeDataToSend() {  // TODO z oxs data protocol check
		boolean dataFirst = true;
		if (MainP.protocol.getName().equals("Multiplex")) {
			output.println("// ***** 9.2 - Multiplex data *****");
			output.println("#define SETUP_MULTIPLEX_DATA_TO_SEND    \\");
		} else {
			output.println("// ***** 9.1 - FrSky data *****");
			output.println("#define SETUP_FRSKY_DATA_TO_SEND    \\");
		}
		for (int i = 1; i <= TabData.getFieldNbr(); i++) {
			String sentDataFieldName;
			sentDataFieldName = TabData.getSentDataField(i).getCaptionLabel().getText();
			if (!sentDataFieldName.equals("----------")) {
				if (!dataFirst) {
					output.println(" , \\");
				}
				if (sentDataFieldName.equals("Cells monitoring")) {
					if (TabVoltage.getCellsTgl().getValue() == 1) {
						for (int j = 1; j <= (int) TabVoltage.getDdlNbrCells().getValue(); j += 2) {
							output.print("                        " + "DEFAULTFIELD , CELLS_" + j + "_"	+ (j + 1) + " , 1 , 1 , 0");
							if ((int) TabVoltage.getDdlNbrCells().getValue() > (j + 1)) {
								output.println(" , \\");
							}
							dataFirst = false;
						}
					}
				} else {
					output.print("                        "	
							+ MainP.protocol.getDataCode(TabData.getTargetDataField(i).getCaptionLabel().getText()) + " , "
							+ OXSdata.getName(TabData.getSentDataField(i).getCaptionLabel().getText()) + " , "
							+ TabData.getDataMultiplierNBox()[i].getValueLabel().getText() + " , "
							+ TabData.getDataDividerNBox()[i].getValueLabel().getText()	+ " , "
							+ TabData.getDataOffsetNBox()[i].getValueLabel().getText());
					if (MainP.protocol.getName().equals("Multiplex")) {
						output.print(", -16384 , 16383");
					}
					dataFirst = false;
				}
			}
		}
		output.println("");
		output.println("");
	}

}
